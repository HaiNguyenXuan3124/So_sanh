# -*- coding: utf-8 -*-
"""TH2_HMM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yj1kRl18Pij2dK0BCK1NxUzAKQI8qjKU
"""

import pandas as pd
import numpy  as np
import matplotlib.pyplot as plt

df = pd.read_csv('/content/data.csv')
df.head()
df.info()

df.isna().sum()

# Xử lý giá trị thiếu: thay thế bằng trung bình của từng cột số
numeric_cols = df.select_dtypes(include='number').columns
df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())

# Xử lý ngoại lai: thay thế các giá trị ngoài ngưỡng IQR bằng trung vị
for col in numeric_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower, upper = Q1 - 1.5 * IQR, Q3 + 1.5 * IQR
    median = df[col].median()
    mask = (df[col] < lower) | (df[col] > upper)
    df.loc[mask, col] = median

# Lưu file kết quả
df.to_csv('processed_data.csv', index=False)

pip install pykalman

# Kalman
import pandas as pd
from pykalman import KalmanFilter
import matplotlib.pyplot as plt

# 2. Chuẩn bị dữ liệu
df = pd.read_csv('/content/processed_data.csv', parse_dates=['dt'])
# Lọc ví dụ cho 1 quốc gia, sắp theo thời gian
ts = df[df['Country']=='Åland'].set_index('dt')['AverageTemperature'].fillna(method='ffill')

# 3. Khởi tạo và huấn luyện KF
kf = KalmanFilter(
    transition_matrices = [1],
    observation_matrices = [1],
    transition_covariance = 1e-2,   # Q
    observation_covariance = 1e-1,  # R
    initial_state_mean = ts.iloc[0],
    initial_state_covariance = 1
)
# ước lượng toàn bộ chuỗi trạng thái ẩn
state_means, state_covs = kf.smooth(ts.values)

# 4. Vẽ kết quả
plt.figure(figsize=(10,4))
plt.plot(ts.index, ts.values,        label='Quan sát')
plt.plot(ts.index, state_means[:,0], label='Ước lượng KF')
plt.legend(); plt.title('Kalman Filter'); plt.show()

# Particle
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# 1. Chuẩn bị dữ liệu
df = pd.read_csv('/content/processed_data.csv', parse_dates=['dt'])
ts = df[df['Country']=='Åland'].set_index('dt')['AverageTemperature'].fillna(method='ffill').values

# 2. Thiết lập PF
N = 1000                    # số hạt
particles = np.random.normal(ts[0], 1, size=N)
weights   = np.ones(N)/N

# 3. Hàm chuyển và hàm đo
def transition(p):
    return p + np.random.normal(0, np.sqrt(1e-2), size=p.shape)  # Q

def weight_update(p, obs):
    return (1/np.sqrt(2*np.pi*1e-1)) * np.exp(-0.5*((obs-p)**2)/1e-1)  # R

# 4. Lọc tuần tự
estimates = []
for y in ts:
    # Propagate
    particles = transition(particles)
    # Weight
    weights *= weight_update(particles, y)
    weights += 1e-300            # tránh chia 0
    weights /= np.sum(weights)
    # Estimate
    estimates.append(np.sum(particles * weights))
    # Resample (systematic)
    idx = np.random.choice(N, size=N, p=weights)
    particles, weights = particles[idx], np.ones(N)/N

# 5. Vẽ kết quả
plt.figure(figsize=(10,4))
dates = df[df['Country']=='Åland'].set_index('dt').index
plt.plot(dates, ts,        label='Quan sát')
plt.plot(dates, estimates, label='Ước lượng PF')
plt.legend(); plt.title('Particle Filter'); plt.show()

pip install hmmlearn

# Viterbi
import numpy as np
import pandas as pd
from hmmlearn.hmm import GaussianHMM
import matplotlib.pyplot as plt

# 2. Chuẩn bị dữ liệu (1-chiều)
df = pd.read_csv('/content/processed_data.csv', parse_dates=['dt'])
ts = df[df['Country']=='Åland'].set_index('dt')['AverageTemperature'].fillna(method='ffill').values.reshape(-1,1)

# 3. Xây dựng và huấn luyện HMM
n_states = 3
model = GaussianHMM(n_components=n_states, covariance_type='diag', n_iter=100)
model.fit(ts)

# 4. Giải mã (Viterbi)
hidden_states = model.predict(ts)

# 5. Vẽ kết quả
plt.figure(figsize=(10,4))
plt.plot(df[df['Country']=='Åland'].set_index('dt').index, ts, label='Quan sát')
for s in range(n_states):
    mask = (hidden_states == s)
    plt.scatter(df[df['Country']=='Åland'].set_index('dt').index[mask],
                ts.flatten()[mask], s=5, label=f'State {s}')
plt.legend(); plt.title('HMM + Viterbi'); plt.show()